services:
  postgres-db:
    image: postgres
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_DB: soa_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d soa_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  neo4j-db:
    image: neo4j:4.4
    container_name: neo4j-db
    environment:
      NEO4J_AUTH: none
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data

  mongo-db:
    image: mongo
    container_name: mongo-db
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  stakeholders-service:
    build:
      context: ./services/stakeholders-service
      dockerfile: Dockerfile
    container_name: stakeholders-service
    ports:
      - "8081:8081"
    environment:
      NEO4J_URI: "neo4j://neo4j-db:7687"
    depends_on:
      - neo4j-db
    restart: on-failure

  payments-service:
    build:
      context: ./services/payments-service
      dockerfile: Dockerfile
    container_name: payments-service
    ports:
      - "8084:8080" # VraÄ‡en port na originalnu vrednost
    environment:
      ASPNETCORE_URLS: "http://+:8080"
      ConnectionStrings__PaymentsDb: "Host=postgres-db;Port=5432;Database=soa_db;Username=postgres;Password=super"
      ASPNETCORE_ENVIRONMENT: "Development"
    depends_on:
      postgres-db:
        condition: service_healthy
    restart: on-failure

  blog-service:
    build:
      context: ./services/blog-service
      dockerfile: Dockerfile
    container_name: blog-service
    ports:
      - "8082:8082"
    environment:
      MONGO_URI: "mongodb://mongo-db:27017"
    depends_on:
      - mongo-db
    restart: on-failure

  tours-service:
    build:
      context: ./services/tours-service
      dockerfile: Dockerfile
    container_name: tours-service
    ports:
      - "8083:8083"
    environment:
      MONGO_URI: "mongodb://mongo-db:27017"
    depends_on:
      - mongo-db
    restart: on-failure

  # --- NOVI SERVIS ---
  encounters-service:
    build:
      context: ./services/encounters-service
      dockerfile: Dockerfile
    container_name: encounters-service
    ports:
      - "8085:8084" # Novi servis na portu 8085
    environment:
      MONGO_URI: "mongodb://mongo-db:27017"
    depends_on:
      - mongo-db
    restart: on-failure

  # --- FOLLOWER SERVIS ---
  follower-service:
    build:
      context: ./services/follower-service
      dockerfile: Dockerfile
    container_name: follower-service
    ports:
      - "8086:8086" # Follower servis na portu 8086
    environment:
      NEO4J_URI: "bolt://neo4j-db:7687"
      NEO4J_USERNAME: "neo4j"
      NEO4J_PASSWORD: ""
      PORT: "8086"
    depends_on:
      - neo4j-db
    restart: on-failure

  # --- API GATEWAY ---
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000" # Gateway port
    depends_on:
      - stakeholders-service
      - payments-service
      - blog-service
      - tours-service
      - encounters-service
      - follower-service
    restart: on-failure

  # --- FRONTEND ---
  frontend:
    build:
      context: ./frontend/tour-app
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "4200:4200" # Development mode port
    volumes:
      - ./frontend/tour-app/src:/app/src
      - ./frontend/tour-app/proxy.conf.json:/app/proxy.conf.json
    depends_on:
      - api-gateway
    restart: on-failure

  # --- MONITORING SERVICES ---
  # Prometheus za collecting metrika
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  # Grafana za vizualizaciju
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped

  # cAdvisor za CONTAINER metrike
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker:/var/lib/docker:ro
    ports:
      - "8087:8080"
    restart: unless-stopped

volumes:
  postgres-data:
  neo4j-data:
  mongo-data: