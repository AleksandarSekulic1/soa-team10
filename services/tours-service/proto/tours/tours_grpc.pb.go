// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: proto/tours/tours.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToursServiceClient is the client API for ToursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToursServiceClient interface {
	// Funkcija koju će encounters-service pozivati
	GetTourById(ctx context.Context, in *GetTourByIdRequest, opts ...grpc.CallOption) (*GetTourByIdResponse, error)
}

type toursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToursServiceClient(cc grpc.ClientConnInterface) ToursServiceClient {
	return &toursServiceClient{cc}
}

func (c *toursServiceClient) GetTourById(ctx context.Context, in *GetTourByIdRequest, opts ...grpc.CallOption) (*GetTourByIdResponse, error) {
	out := new(GetTourByIdResponse)
	err := c.cc.Invoke(ctx, "/tours.ToursService/GetTourById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToursServiceServer is the server API for ToursService service.
// All implementations must embed UnimplementedToursServiceServer
// for forward compatibility
type ToursServiceServer interface {
	// Funkcija koju će encounters-service pozivati
	GetTourById(context.Context, *GetTourByIdRequest) (*GetTourByIdResponse, error)
	mustEmbedUnimplementedToursServiceServer()
}

// UnimplementedToursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToursServiceServer struct {
}

func (UnimplementedToursServiceServer) GetTourById(context.Context, *GetTourByIdRequest) (*GetTourByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourById not implemented")
}
func (UnimplementedToursServiceServer) mustEmbedUnimplementedToursServiceServer() {}

// UnsafeToursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToursServiceServer will
// result in compilation errors.
type UnsafeToursServiceServer interface {
	mustEmbedUnimplementedToursServiceServer()
}

func RegisterToursServiceServer(s grpc.ServiceRegistrar, srv ToursServiceServer) {
	s.RegisterService(&ToursService_ServiceDesc, srv)
}

func _ToursService_GetTourById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetTourById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tours.ToursService/GetTourById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetTourById(ctx, req.(*GetTourByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToursService_ServiceDesc is the grpc.ServiceDesc for ToursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tours.ToursService",
	HandlerType: (*ToursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTourById",
			Handler:    _ToursService_GetTourById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tours/tours.proto",
}
